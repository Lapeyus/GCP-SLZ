name: "Terraform Validation"

on:
    push:
      paths:
        - 'terraform/**'
      branches:
        - '*'
    pull_request:
      paths:
        - 'terraform/**'
      branches:
        - '*'
    workflow_dispatch:  

concurrency:
  group: unique-execution

permissions:
  contents: 'write'
  id-token: 'write'

env:
  GOOGLE_PROJECT: BU-seed-001
  GOOGLE_BUCKET: BU-tf-seed-state


jobs:
  tflint:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      name: Checkout source code

    - uses: actions/cache@v3
      name: Cache plugin dir
      with:
        path: ~/.tflint.d/plugins
        key: ubuntu-latest-tflint-${{ hashFiles('.tflint.hcl') }}

    - uses: terraform-linters/setup-tflint@v3
      name: Setup TFLint
      with:
        tflint_version: v0.44.1

    - name: Run TFLint
      run: tflint --recursive

  checkov:
    name: 'Checkov scan'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Checkov
        run: pip install checkov

      - name: Run Checkov
        run: checkov --config-file ./.github/checkov.yml

  terrascan_job:
    runs-on: ubuntu-latest
    name: terrascan
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
    - name: Run Terrascan
      id: terrascan
      uses: tenable/terrascan-action@main
      with:
        iac_type: 'terraform'
        iac_version: 'v14'
        policy_type: 'gcp'
        only_warn: true
        sarif_upload: false
        non_recursive: true
        iac_dir: bootstrap/
        policy_path: ./
        #skip_rules:
        #config_path:
        #webhook_url:
        #webhook_token:

  tfsec:
    name: tfsec
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          soft_fail: true

  # terraform:
  #     name: 'Terraforming'
  #     runs-on: ubuntu-latest
  #     needs: [checkov,tflint]

  #     # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
  #     defaults:
  #       run:
  #         shell: bash

  #     steps:
  #     # Checkout the repository to the GitHub Actions runner
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Set up Terraform
  #       uses: hashicorp/setup-terraform@v2
  #       with:
  #         terraform_version: "1.5.3"

  #     - id: auth
  #       name: Authenticate to Google Cloud
  #       uses: google-github-actions/auth@v1
  #       with:
  #         workload_identity_provider: 'projects/734894532576/locations/global/workloadIdentityPools/github-terraformer/providers/gh-actions'
  #         service_account: 'tf-service-account@${{ env.GOOGLE_PROJECT }}.iam.gserviceaccount.com'

  #     - name: 'Set up Cloud SDK'
  #       uses: 'google-github-actions/setup-gcloud@v1'

  #     - name: 'Use gcloud CLI'
  #       run: 'gcloud info'

  #     - name: Check auth outputs
  #       run: 'echo The following are the outputs from the auth step: ${{ steps.auth.outputs }}'

  #     # Initialize a new or existing Terrafoashicorp/setup-terraform@v1rm working directory by creating initial files, loading any remote state, downloading modules, etc.
  #     - name: Terraform Init
  #       working-directory: ./bootstrap/
  #       run: |
  #         export GOOGLE_APPLICATION_CREDENTIALS="${{ steps.auth.outputs.credentials_file_path }}"
  #         terraform init -backend-config="bucket=${{ env.GOOGLE_BUCKET }}"

  #     # Checks that all Terraform configuration files adhere to a canonical format
  #     - name: Terraform Format
  #       working-directory: ./bootstrap/
  #       run: terraform fmt -check

  #     # Generates an execution plan for Terraform
  #     - name: Terraform Plan
  #       working-directory: ./bootstrap/
  #       run: terraform plan

  #     # Generates an execution APPLY for Terraform
  #     - name: Terraform Apply
  #       if: github.ref == 'refs/heads/main'
  #       working-directory: ./bootstrap/
  #       run: terraform apply -auto-approve
